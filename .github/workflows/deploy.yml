name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_SSH_USER }}
        key: ${{ secrets.DO_SSH_KEY }}
        envs: |
          POSTGRES_DB=${{ secrets.ENV_POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.ENV_POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.ENV_POSTGRES_PASSWORD }}
          DATABASE_URL=${{ secrets.ENV_DATABASE_URL }}
          JWT_SECRET_KEY=${{ secrets.ENV_JWT_SECRET_KEY }}
          JWT_ALGORITHM=${{ secrets.ENV_JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ENV_JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          BACKEND_CORS_ORIGINS=${{ secrets.ENV_BACKEND_CORS_ORIGINS }}
          ENVIRONMENT=${{ secrets.ENV_ENVIRONMENT }}
          DEBUG=${{ secrets.ENV_DEBUG }}
          ADMIN_USERNAME=${{ secrets.ENV_ADMIN_USERNAME }}
          ADMIN_PASSWORD=${{ secrets.ENV_ADMIN_PASSWORD }}
          ADMIN_EMAIL=${{ secrets.ENV_ADMIN_EMAIL }}
        # Mesma estrutura anterior, mas com esta modificação no script
script: |
  cd ~/python-peoples-crud
  
  # Criar arquivo de ambiente temporário
  env_file=$(mktemp)
  
  cat > "$env_file" << EOF
POSTGRES_DB=${{ secrets.ENV_POSTGRES_DB }}
POSTGRES_USER=${{ secrets.ENV_POSTGRES_USER }}
POSTGRES_PASSWORD=${{ secrets.ENV_POSTGRES_PASSWORD }}
DATABASE_URL=${{ secrets.ENV_DATABASE_URL }}
JWT_SECRET_KEY=${{ secrets.ENV_JWT_SECRET_KEY }}
JWT_ALGORITHM=${{ secrets.ENV_JWT_ALGORITHM }}
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ENV_JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
BACKEND_CORS_ORIGINS=${{ secrets.ENV_BACKEND_CORS_ORIGINS }}
ENVIRONMENT=${{ secrets.ENV_ENVIRONMENT }}
DEBUG=${{ secrets.ENV_DEBUG }}
ADMIN_USERNAME=${{ secrets.ENV_ADMIN_USERNAME }}
ADMIN_PASSWORD=${{ secrets.ENV_ADMIN_PASSWORD }}
ADMIN_EMAIL=${{ secrets.ENV_ADMIN_EMAIL }}
EOF
  
  # Usar arquivo de ambiente no docker-compose
docker-compose -f config/docker-compose.yml --env-file "$env_file" down
docker-compose -f config/docker-compose.yml --env-file "$env_file" up -d --build
  
  # Limpar arquivo temporário
rm "$env_file"