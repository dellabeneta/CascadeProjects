name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_SSH_USER }}
        key: ${{ secrets.DO_SSH_KEY }}
        envs: |
          POSTGRES_DB=${{ secrets.ENV_POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.ENV_POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.ENV_POSTGRES_PASSWORD }}
          DATABASE_URL=${{ secrets.ENV_DATABASE_URL }}
          JWT_SECRET_KEY=${{ secrets.ENV_JWT_SECRET_KEY }}
          JWT_ALGORITHM=${{ secrets.ENV_JWT_ALGORITHM }}
          JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ENV_JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
          BACKEND_CORS_ORIGINS=${{ secrets.ENV_BACKEND_CORS_ORIGINS }}
          ENVIRONMENT=${{ secrets.ENV_ENVIRONMENT }}
          DEBUG=${{ secrets.ENV_DEBUG }}
          ADMIN_USERNAME=${{ secrets.ENV_ADMIN_USERNAME }}
          ADMIN_PASSWORD=${{ secrets.ENV_ADMIN_PASSWORD }}
          ADMIN_EMAIL=${{ secrets.ENV_ADMIN_EMAIL }}
        script: |
          cd ~/python-peoples-crud
          
          # Clonar ou atualizar repositório
          if [ ! -d .git ]; then
            git clone https://github.com/${{ github.repository }}.git .
          else
            git fetch --all
            git reset --hard origin/main
          fi
          
          # Criar .env explicitamente
          cat > .env << EOF
POSTGRES_DB=$POSTGRES_DB
POSTGRES_USER=$POSTGRES_USER
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
DATABASE_URL=$DATABASE_URL
JWT_SECRET_KEY=$JWT_SECRET_KEY
JWT_ALGORITHM=$JWT_ALGORITHM
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=$JWT_ACCESS_TOKEN_EXPIRE_MINUTES
BACKEND_CORS_ORIGINS=$BACKEND_CORS_ORIGINS
ENVIRONMENT=$ENVIRONMENT
DEBUG=$DEBUG
ADMIN_USERNAME=$ADMIN_USERNAME
ADMIN_PASSWORD=$ADMIN_PASSWORD
ADMIN_EMAIL=$ADMIN_EMAIL
EOF
          
          # Verificar instalação do Docker
if ! command -v docker &> /dev/null; then
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
fi
          
if ! command -v docker-compose &> /dev/null; then
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
fi
          
          # Debug: Mostrar variáveis
cat .env
          
          # Tentar deploy
docker-compose -f config/docker-compose.yml down || true
docker-compose -f config/docker-compose.yml up -d --build
          
          # Mostrar status e logs
docker-compose -f config/docker-compose.yml ps
docker-compose -f config/docker-compose.yml logs